// ---------------------------------------------
// Gradle build file for Resilient Spring WebFlux POC
// ---------------------------------------------

plugins {
    id 'java' // Java plugin for compiling Java code
    id 'org.springframework.boot' version '3.3.5' // Spring Boot plugin
    id 'io.spring.dependency-management' version '1.1.4' // Dependency management
    id 'com.diffplug.spotless' version '6.25.0' // Spotless plugin for code formatting
}
// ---------------------------------------------
// Spotless configuration for automatic code formatting
// ---------------------------------------------
spotless {
    java {
        palantirJavaFormat('2.40.0') // Use Palantir Java Format (a fork of Google's)
        target 'src/**/*.java'
    }
    format 'misc', {
        target '*.gradle', '*.md', '*.yml', '*.yaml'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

// Ensure Spotless formatting is applied automatically before building.
// This will reformat files in-place and allow the build to proceed without failing.
tasks.named('build') {
    dependsOn 'spotlessApply'
}

group = 'com.resilient'
version = '1.0.0'
java.sourceCompatibility = JavaVersion.VERSION_17 // Set Java version

java {
    // Enforce a specific JDK version for the build process
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral() // Use Maven Central repository
}

dependencies {
    // --- Spring WebFlux and related starters ---
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // Reactive web
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc' // Reactive DB
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-validation' // Bean validation
    implementation 'org.springframework.boot:spring-boot-starter-security' // Core security features
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    // --- Database (H2, PostgreSQL, R2DBC) ---
    implementation 'io.r2dbc:r2dbc-h2' // R2DBC driver for H2
    implementation 'com.h2database:h2' // H2 database (for dev/test)
    implementation 'io.r2dbc:r2dbc-postgresql:0.8.13.RELEASE' // R2DBC driver for PostgreSQL (prod)

    // --- Resilience4j for fault tolerance ---
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-reactor:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-micrometer:2.1.0'

    // --- Observability: OpenTelemetry, Prometheus ---
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // --- Utilities ---
    implementation 'com.fasterxml.jackson.core:jackson-databind' // JSON serialization
    implementation 'org.apache.commons:commons-lang3' // Utility functions

    // --- JWT ---
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5' // for Jackson JSON parser

    // --- Messaging: Kafka, ActiveMQ ---
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-activemq'

    // --- Reactor Kafka ---
    implementation 'io.projectreactor.kafka:reactor-kafka:1.3.21'

    // --- AOP/AspectJ ---
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // --- ActiveMQ Broker ---
    implementation 'org.apache.activemq:activemq-broker:5.18.3'

    // --- Spring Messaging ---
    implementation 'org.springframework:spring-messaging'

    // --- JMS/Artemis for Spring Boot 3+ ---
    implementation 'org.springframework.boot:spring-boot-starter-artemis'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // --- Apache Kafka Client ---
    implementation 'org.apache.kafka:kafka-clients:3.7.0'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier:3.1.8') {
        // Exclude the servlet-based web starter to maintain a pure WebFlux environment
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
    }
    constraints {
        implementation('org.codehaus.groovy:groovy:3.0.9')
        implementation('org.codehaus.groovy:groovy-json:3.0.9')
        implementation('org.codehaus.groovy:groovy-xml:3.0.9')
    }
}

def isMac = System.getProperty('os.name').toLowerCase().contains('mac')
def isArm64 = System.getProperty('os.arch') == 'aarch64'

if (isMac && isArm64) {
    dependencies {
        implementation 'io.netty:netty-resolver-dns-native-macos:4.1.119.Final:osx-aarch_64'
    }
} else if (isMac) {
    dependencies {
        implementation 'io.netty:netty-resolver-dns-native-macos:4.1.119.Final:osx-x86_64'
    }
}

test {
    useJUnitPlatform()
}

// Configure the Gradle Wrapper to enforce a specific version
wrapper {
    gradleVersion = '8.9'
    distributionType = Wrapper.DistributionType.BIN
}

configurations.all {
    resolutionStrategy {
        force 'org.codehaus.groovy:groovy:3.0.9'
        force 'org.codehaus.groovy:groovy-json:3.0.9'
        force 'org.codehaus.groovy:groovy-xml:3.0.9'
        // Exclude conflicting org.apache.groovy modules
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'org.apache.groovy', module: 'groovy-json'
        exclude group: 'org.apache.groovy', module: 'groovy-xml'
    }
}
